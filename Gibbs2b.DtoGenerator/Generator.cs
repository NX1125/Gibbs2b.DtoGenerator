using System.Text.Json;
using System.Text.Json.Serialization;
using Microsoft.Extensions.Logging;
using Gibbs2b.DtoGenerator.Model;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations.Operations;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;
using Microsoft.Extensions.Hosting;

namespace Gibbs2b.DtoGenerator;

public class Generator
{
    private SolutionSpec _solution;
    private readonly ILogger<Generator> _logger;

    public Generator(SolutionSpec solution, ILogger<Generator> logger)
    {
        _solution = solution;
        _logger = logger;
    }

    public void Run(string? path)
    {
        _solution.CreateSchema();
        _solution.Path = path ?? Directory.GetCurrentDirectory();

        GenerateCs();
        GeneratePy();
        GenerateSql();
        GenerateTs();
    }

    private void GenerateSql()
    {
        foreach (var project in _solution.Projects)
        {
            foreach (var view in project.Dto)
            {
                if (!view.IsView)
                    continue;

                var path = Path.ChangeExtension(view.FullCsPath, ".up.sql");

                _logger.LogDebug("Generating View SQL {}", path);

                using (var writer = new StreamWriter(path))
                {
                    writer.WriteLine("-- <auto-generated />");
                    writer.WriteLine();
                    foreach (var model in view.Models)
                    {
                        if (model.TableName == null)
                            continue;

                        var props = string.Join(",\n       ", model.Properties
                            .Where(p => !p.Options.NotMapped && p.TypeNameType != TypeNameEnum.Model)
                            .Select(p => $"\"{p.PropertyName}\""));

                        writer.WriteLine($"CREATE VIEW \"{model.DbViewName}\" AS");
                        writer.WriteLine($"SELECT {props}");
                        writer.WriteLine($"FROM \"{model.TableName}\";");
                        writer.WriteLine();
                    }
                }

                path = Path.ChangeExtension(view.FullCsPath, ".down.sql");

                using var writer2 = new StreamWriter(path);

                writer2.WriteLine("-- <auto-generated />");
                writer2.WriteLine();
                foreach (var model in view.Models)
                {
                    if (model.TableName == null)
                        continue;

                    writer2.WriteLine($"DROP VIEW \"{model.DbViewName}\";");
                }
            }
        }
    }

    private void GenerateCs()
    {
        GenerateDtoCs();
        GenerateContextCs();
    }

    private IEnumerable<NamespaceSpec> SortUsing(IEnumerable<NamespaceSpec> uses, NamespaceSpec current)
    {
        return uses
            .OrderBy(u => u.Parts[0].Equals(current.Parts[0])
                ? 3
                : u.Parts[0].CapitalCase switch
                {
                    "System" => 0,
                    "Microsoft" => 1,
                    _ => 2,
                })
            .ThenBy(u => u.Namespace);
    }

    private void GenerateDtoCs()
    {
        foreach (var project in _solution.Projects)
        {
            foreach (var dto in project.Dto)
            {
                var path = Path.ChangeExtension(Path.Combine(_solution.Path, dto.CsPath), ".gen.cs");

                _logger.LogDebug("Generating {} {}", dto.Options.IsView ? "View" : "DTO", path);

                using var writer = new StreamWriter(path);

                writer.WriteLine("// <auto-generated />");
                writer.WriteLine("#nullable enable");
                writer.WriteLine();

                var usingList = new HashSet<NamespaceSpec>
                {
                    NamespaceSpec.Linq,
                    NamespaceSpec.GenericCollections,
                    NamespaceSpec.DataAnnotations,
                    new("System.ComponentModel.DataAnnotations.Schema"),
                    new("Gibbs2b.DtoGenerator.Annotation"),
                    new("System.Text.Json.Serialization"),
                };

                foreach (var model in dto.Models)
                {
                    usingList.Add(model.Model.Namespace);

                    foreach (var property in model.Properties)
                    {
                        var ns = property.Property.TypeNameType switch
                        {
                            TypeNameEnum.DateTime => NamespaceSpec.SystemNamespace,
                            TypeNameEnum.Guid => NamespaceSpec.SystemNamespace,
                            TypeNameEnum.TsVector => NamespaceSpec.NpgsqlTypes,
                            TypeNameEnum.Model => property.Property.TypeModel!.Namespace,
                            TypeNameEnum.Enum => property.Property.TypeEnum!.Namespace,
                            _ => null,
                        };

                        if (ns != null)
                            usingList.Add(ns);

                        ns = property.Options.EnumerableType switch
                        {
                            EnumerableType.Enumerable => NamespaceSpec.GenericCollections,
                            EnumerableType.Collection => NamespaceSpec.GenericCollections,
                            EnumerableType.List => NamespaceSpec.GenericCollections,
                            _ => null,
                        };

                        if (ns != null)
                            usingList.Add(ns);
                    }
                }

                foreach (var usingNamespace in SortUsing(usingList, project.Name))
                {
                    writer.WriteLine($"using {usingNamespace};");
                }

                var extensionLines = new List<string>();

                writer.WriteLine();
                writer.WriteLine($"namespace {dto.Namespace};");
                writer.WriteLine();
                writer.WriteLine($"public partial class {dto.Name}");
                writer.WriteLine('{');

                foreach (var model in dto.Models)
                {
                    writer.WriteLine(model.Parent.Options.IsView
                        ? "    [GenView]"
                        : "    [DtoModel]");
                    writer.WriteLine("    [GeneratedDto]");
                    writer.WriteLine($"    public partial class {model.DtoName}");
                    writer.WriteLine("    {");

                    foreach (var prop in model.Properties)
                    {
                        // writer.WriteLine("        [GeneratedProperty]");

                        if (prop.Options.Required)
                            writer.WriteLine("        [Required]");

                        if (prop.Options.MinLength != null)
                            writer.WriteLine($"        [MinLength({prop.Options.MinLength})]");
                        if (prop.Options.MaxLength != null)
                            writer.WriteLine($"        [MaxLength({prop.Options.MaxLength})]");

                        if (prop.Options.JsonIgnore == JsonIgnoreCondition.Always)
                            writer.WriteLine($"        [JsonIgnore]");
                        else if (prop.Options.JsonIgnore != null)
                            writer.WriteLine($"        [JsonIgnore(Condition = JsonIgnoreCondition.{prop.Options.JsonIgnore})]");

                        if (dto.IsView && prop.Options.NotMapped)
                            writer.WriteLine("        [NotMapped]");

                        var type = prop.Property.TypeNameType switch
                        {
                            TypeNameEnum.Int => "int",
                            TypeNameEnum.Long => "long",
                            TypeNameEnum.Float => "float",
                            TypeNameEnum.Double => "double",
                            TypeNameEnum.Decimal => "decimal",
                            TypeNameEnum.Bool => "bool",
                            TypeNameEnum.String => "string",
                            TypeNameEnum.DateTime => "DateTime",
                            TypeNameEnum.Guid => "Guid",
                            TypeNameEnum.TsVector => "NpgsqlTsVector",
                            TypeNameEnum.Model => prop.TypeModel!.DtoName.CapitalCase,
                            TypeNameEnum.Enum => prop.Property.TypeEnum!.Name.CapitalCase,
                            _ => throw new ArgumentOutOfRangeException(null, $"{prop.Property.TypeNameType} ({prop.PropertyName})", null),
                        };

                        if (prop.Options.IsNullableItem)
                            type = $"{type}?";

                        type = prop.Options.EnumerableType switch
                        {
                            EnumerableType.None => type,
                            EnumerableType.Enumerable => $"IEnumerable<{type}>",
                            EnumerableType.Collection => $"ICollection<{type}>",
                            EnumerableType.Array => $"{type}[]",
                            EnumerableType.List => $"IList<{type}>",
                            _ => throw new ArgumentOutOfRangeException(),
                        };

                        if (prop.Options.IsNullable)
                        {
                            type = $"{type}?";
                        }

                        if (!prop.Options.IsNullable
                            && (prop.Options.EnumerableType is EnumerableType.Array
                                    or EnumerableType.Enumerable
                                    or EnumerableType.Collection
                                    or EnumerableType.List
                                || prop.TypeNameType is TypeNameEnum.Model
                                    or TypeNameEnum.String))
                        {
                            writer.WriteLine($"        public {type} {prop.PropertyName} {{ get; set; }} = null!;");
                        }
                        else
                        {
                            writer.WriteLine($"        public {type} {prop.PropertyName} {{ get; set; }}");
                        }

                        writer.WriteLine();
                    }

                    var modelName = model.Model.UsingName;

                    if (dto.Options.CopyFromModel)
                    {
                        writer.WriteLine($"        public {model.DtoName}()");
                        writer.WriteLine("        {");
                        writer.WriteLine("        }");
                        writer.WriteLine();

                        writer.WriteLine($"        public {model.DtoName}({modelName} source)");
                        writer.WriteLine("        {");
                        writer.WriteLine("            CopyFrom(source);");
                        writer.WriteLine("        }");
                        writer.WriteLine();

                        writer.WriteLine($"        public void CopyFrom({modelName} source)");
                        writer.WriteLine("        {");
                        foreach (var property in model.Properties)
                        {
                            var propDto = property.TypeModel;
                            var name = property.PropertyName;
                            switch (property.Options.EnumerableType)
                            {
                                case EnumerableType.Enumerable:
                                case EnumerableType.Collection:
                                case EnumerableType.Array:
                                case EnumerableType.List:
                                    if (propDto != null && dto.IsView)
                                    {
                                        writer.WriteLine($"            {name} = {propDto.DtoName}.ToArray(source.{name});");
                                    }
                                    else
                                    {
                                        writer.WriteLine(propDto == null
                                            ? $"            {name} = source.{name};"
                                            : $"            {name} = {propDto.DtoName}.ToEnumerable(source.{name});");
                                    }

                                    break;
                                default:
                                    if (propDto != null)
                                    {
                                        writer.WriteLine(property.Options.IsNullable
                                            ? $"            {name} = source.{name} == null ? null : new(source.{name});"
                                            : $"            {name} = new(source.{name});");
                                    }
                                    else
                                    {
                                        writer.WriteLine($"            {name} = source.{name};");
                                    }

                                    break;
                            }
                        }

                        writer.WriteLine("        }");
                        writer.WriteLine();

                        writer.WriteLine($"        public static {model.DtoName}[] ToArray(IEnumerable<{modelName}> source)");
                        writer.WriteLine("        {");
                        writer.WriteLine($"            return ToEnumerable(source).ToArray();");
                        writer.WriteLine("        }");
                        writer.WriteLine();

                        writer.WriteLine($"        public static IEnumerable<{model.DtoName}> ToEnumerable(IEnumerable<{modelName}> source)");
                        writer.WriteLine("        {");
                        writer.WriteLine($"            return source.Select(v => new {model.DtoName}(v));");
                        writer.WriteLine("        }");
                        writer.WriteLine();
                    }

                    if (dto.Options.CopyToModel)
                    {
                        writer.WriteLine($"        public void CopyTo({modelName} target)");
                        writer.WriteLine("        {");
                        foreach (var property in model.Properties)
                        {
                            switch (property.Options.EnumerableType)
                            {
                                case EnumerableType.Enumerable:
                                case EnumerableType.Collection:
                                case EnumerableType.Array:
                                case EnumerableType.List:
                                    writer.WriteLine($"            target.{property.PropertyName} = {property.PropertyName}.ToEnumerable();");
                                    break;
                                default:
                                    writer.WriteLine($"            target.{property.PropertyName} = {property.PropertyName};");
                                    break;
                            }
                        }

                        writer.WriteLine("        }");
                        writer.WriteLine();

                        writer.WriteLine($"        public {modelName} ToModel()");
                        writer.WriteLine("        {");
                        writer.WriteLine($"            var model = new {modelName}();");
                        writer.WriteLine("             CopyTo(model);");
                        writer.WriteLine("             return model;");
                        writer.WriteLine("        }");
                        writer.WriteLine();

                        writer.WriteLine($"        public static {modelName}[] ToArray(IEnumerable<{model.DtoName}> source)");
                        writer.WriteLine("        {");
                        writer.WriteLine("            return ToEnumerable(source).ToArray();");
                        writer.WriteLine("        }");
                        writer.WriteLine();

                        writer.WriteLine($"        public static IEnumerable<{modelName}> ToEnumerable(IEnumerable<{model.DtoName}> source)");
                        writer.WriteLine("        {");
                        writer.WriteLine("            return source.Select(d => d.ToModel());");
                        writer.WriteLine("        }");
                        writer.WriteLine();

                        extensionLines.Add($"    public static {modelName}[] ToModelArray(this IEnumerable<{dto.Name}.{model.DtoName}> source)");
                        extensionLines.Add("    {");
                        extensionLines.Add($"        return {dto.Name}.{model.DtoName}.ToArray(source);");
                        extensionLines.Add("    }");
                        extensionLines.Add("");

                        extensionLines.Add(
                            $"    public static IEnumerable<{modelName}> ToModelEnumerable(this IEnumerable<{dto.Name}.{model.DtoName}> source)");
                        extensionLines.Add("    {");
                        extensionLines.Add($"        return {dto.Name}.{model.DtoName}.ToEnumerable(source);");
                        extensionLines.Add("    }");
                        extensionLines.Add("");
                    }

                    writer.WriteLine("    }");
                    writer.WriteLine();
                }

                writer.WriteLine('}');

                if (extensionLines.Count <= 0)
                    continue;

                writer.WriteLine();
                writer.WriteLine($"public static class {dto.Name}Extensions");
                writer.WriteLine('{');
                foreach (var line in extensionLines)
                {
                    writer.WriteLine(line);
                }

                writer.WriteLine('}');
            }
        }
    }

    private void GeneratePy()
    {
        foreach (var project in _solution.PythonProjects)
        {
            Directory.CreateDirectory(project.Value.Path);
            File.Create(Path.Combine(project.Value.Path, "__init__.py"));

            using StreamWriter writer = new(Path.Combine(project.Value.Path, "model_gen.py"));

            writer.WriteLine("import enum");

            foreach (var p in _solution.Projects)
            {
                foreach (var @enum in p.Enums)
                {
                    writer.WriteLine();
                    writer.WriteLine();
                    writer.WriteLine($"class {@enum.Name}(enum.Enum):");
                    foreach (var value in @enum.Values)
                    {
                        var name = value;

                        if (name == "None")
                            name = "None_";

                        writer.WriteLine($"    {name} = \"{value}\"");
                    }
                }
            }
        }

        foreach (var project in _solution.Projects)
        {
            foreach (var dto in project.Dto)
            {
                var relativePath = $"{dto.Name.SnakeCaseName}.py";
                foreach (var targetName in dto.Options.PythonProjects)
                {
                    var path = Path.Combine(_solution.PythonProjects[targetName].Path, relativePath);
                    _logger.LogDebug("Generating {}", path);
                    using StreamWriter writer = new(path);

                    writer.WriteLine("# <auto-generated />");
                    writer.WriteLine();

                    var imports = new HashSet<string> { "dataclasses" };

                    foreach (var model in dto.Models)
                    {
                        foreach (var property in model.Properties)
                        {
                            switch (property.Property.TypeNameType)
                            {
                                case TypeNameEnum.DateTime:
                                    imports.Add("datetime");
                                    break;
                                case TypeNameEnum.Guid:
                                    imports.Add("uuid");
                                    imports.Add("typing");
                                    break;
                            }

                            if (property.Options.IsNullable)
                                imports.Add("typing");
                        }
                    }

                    foreach (var ns in imports.OrderBy(i => i))
                    {
                        writer.WriteLine($"import {ns}");
                    }

                    foreach (var model in dto.Models)
                    {
                        writer.WriteLine();
                        writer.WriteLine();
                        writer.WriteLine("@dataclasses.dataclass");
                        writer.WriteLine($"class {model.DtoName.CapitalCase}:");

                        var optionalLines = new List<string>();

                        foreach (var property in model.Properties)
                        {
                            var type = property.Property.TypeNameType switch
                            {
                                TypeNameEnum.Int => "int",
                                TypeNameEnum.Long => "int",
                                TypeNameEnum.Float => "float",
                                TypeNameEnum.Double => "float",
                                TypeNameEnum.Decimal => "float",
                                TypeNameEnum.Bool => "bool",
                                TypeNameEnum.String => "str",
                                TypeNameEnum.DateTime => "datetime.datetime",
                                TypeNameEnum.Guid => "typing.Union[str, uuid.UUID]",
                                TypeNameEnum.Model => property.TypeModel!.DtoName.CapitalCase,
                                TypeNameEnum.Enum => property.Property.TypeEnum!.Name.CapitalCase,
                                _ => throw new ArgumentOutOfRangeException(),
                            };

                            type = property.Options.EnumerableType switch
                            {
                                EnumerableType.None => type,
                                EnumerableType.Enumerable => $"list[{type}]",
                                EnumerableType.Collection => $"list[{type}]",
                                EnumerableType.Array => $"list[{type}]",
                                EnumerableType.List => $"list[{type}]",
                                _ => throw new ArgumentOutOfRangeException(),
                            };

                            if (property.Options.IsNullable)
                                type = $"typing.Optional[{type}]";

                            if (property.Options.IsNullable)
                            {
                                optionalLines.Add($"    {property.PropertyName.SnakeCaseName}: {type} = None");
                            }
                            else
                            {
                                writer.WriteLine($"    {property.PropertyName.SnakeCaseName}: {type}");
                            }
                        }

                        foreach (var line in optionalLines)
                        {
                            writer.WriteLine(line);
                        }

                        writer.WriteLine();
                        writer.WriteLine("    @classmethod");
                        writer.WriteLine("    def from_json(cls, data: dict):");
                        writer.WriteLine("        return cls(");

                        foreach (var property in model.Properties)
                        {
                            var access = $"data.get('{property.PropertyName.CamelCase}')";
                            var unsafeAccess = $"data['{property.PropertyName.CamelCase}']";
                            var value = property.Options.IsNullable
                                ? access
                                : unsafeAccess;

                            var needsIfNotNull = property.Options.IsNullable;

                            switch (property.Property.TypeNameType)
                            {
                                case TypeNameEnum.DateTime:
                                    value = $"datetime.datetime.fromisoformat({unsafeAccess})";
                                    break;
                                case TypeNameEnum.Guid:
                                    value = $"uuid.UUID({unsafeAccess})";
                                    break;
                                case TypeNameEnum.Model:
                                    value = $"{property.TypeModel!.DtoName}.from_json({unsafeAccess})";
                                    break;
                                case TypeNameEnum.Enum:
                                    value = $"{property.TypeModel!.DtoName}({unsafeAccess})";
                                    break;
                                default:
                                    needsIfNotNull = false;
                                    break;
                            }

                            if (needsIfNotNull)
                            {
                                value = $"{value} if {access} is not None else None";
                            }

                            writer.WriteLine($"            {property.PropertyName.SnakeCaseName}={value},");
                        }

                        writer.WriteLine("        )");

                        writer.WriteLine();
                        writer.WriteLine("    def to_json(self):");
                        writer.WriteLine("        return {");

                        foreach (var property in model.Properties)
                        {
                            var access = $"self.{property.PropertyName.SnakeCaseName}";
                            var value = access;
                            var needsIfNotNull = true;

                            switch (property.Property.TypeNameType)
                            {
                                case TypeNameEnum.DateTime:
                                    value = $"{value}.isoformat()";
                                    break;
                                case TypeNameEnum.Guid:
                                    value = $"str({value})";
                                    break;
                                case TypeNameEnum.Model:
                                    value = $"{value}.to_json()";
                                    break;
                                case TypeNameEnum.Enum:
                                    value = $"{value}.value";
                                    break;
                                default:
                                    needsIfNotNull = false;
                                    break;
                            }

                            if (property.Options.IsNullable && needsIfNotNull)
                            {
                                value = $"{value} if {access} is not None else None";
                            }

                            writer.WriteLine($"            '{property.PropertyName.CamelCase}': {value},");
                        }

                        writer.WriteLine("        }");
                    }
                }
            }
        }
    }

    private void GenerateContextCs()
    {
        foreach (var project in _solution.Projects)
        {
            var path = Path.ChangeExtension(Path.Combine(project.SourcePath, project.ContextPath), ".gen2.cs");
            _logger.LogInformation("Generating context {}", path);

            using var stream = new StreamWriter(path);

            var usingList = new List<NamespaceSpec>
            {
                NamespaceSpec.EntityFrameworkCore,
                new("Gibbs2b.DtoGenerator"),
                new("Gibbs2b.DtoGenerator.Model"),
            };

            foreach (var view in project.Views)
            {
                usingList.Add(view.Namespace);
            }

            foreach (var view in project.Views)
            {
                usingList.AddRange(view.Models
                    .Select(m => m.Model.Namespace));
            }

            stream.WriteLine("// <auto-generated />");
            foreach (var spec in SortUsing(usingList, project.ContextNamespace))
            {
                stream.WriteLine($"using {spec};");
            }

            stream.WriteLine();
            stream.WriteLine($"namespace {project.ContextNamespace};");
            stream.WriteLine();
            stream.WriteLine($"public partial class {project.ContextName} : IGenDbContext");
            stream.WriteLine('{');
            stream.WriteLine("    public bool InternalDtoIgnore { get; set; }");
            stream.WriteLine();
            stream.WriteLine("    private void ConfigureGeneratedDtoResourcesModel(ModelBuilder b)");
            stream.WriteLine("    {");

            foreach (var view in project.Views)
            {
                stream.WriteLine($"        // {view.Name}");
                foreach (var model in view.MappedModels)
                {
                    if (model.Model.TableName == null)
                        continue;

                    stream.WriteLine($"        b.ExcludeView<{view.Name}.{model.DtoName}>(\"{model.DbViewName}\");");
                }

                stream.WriteLine();
            }
            //
            // foreach (var model in project.Models)
            // {
            //     if (model.TableName == null || !model.Properties.Any(p => p.ForceColumnName))
            //         continue;
            //
            //     stream.WriteLine($"        b.Entity<{model.Name}>(ob =>");
            //     stream.WriteLine("        {");
            //     stream.WriteLine($"            ob.ToTable(\"{model.TableName}\");");
            //     foreach (var property in model.Properties)
            //     {
            //         if (property.ForceColumnName)
            //             stream.WriteLine($"            ob.Property(p => p.{property.Name}).HasColumnName(nameof({model.Name}.{property.Name}));");
            //     }
            //
            //     stream.WriteLine("        });");
            // }

            stream.WriteLine("    }");
            stream.WriteLine('}');
        }
    }

    private void GenerateTs()
    {
        foreach (var project in _solution.Projects)
        {
            var models = project.Dto
                .Where(d => d.Options.TypescriptProjects.Count > 0)
                .SelectMany(d => d.Options.TypescriptProjects
                    .Select(p => (Project: p, Dto: d)))
                .GroupBy(d => d.Project, d => d.Dto);

            foreach (var group in models)
            {
                var typescriptProject = project.GetTypescriptProject(group.Key);
                if (typescriptProject == null)
                    continue;

                _logger.LogInformation("Generating typescript project {}", group.Key);

                foreach (var dto in group)
                {
                    if (!dto.Namespace.StartsWith(typescriptProject.Namespace))
                        continue;

                    var path = Path.Combine(typescriptProject.Path, Path.ChangeExtension(dto.Name.KebabCase, ".dto.gen.ts"));

                    _logger.LogInformation("Generating {}.{} to {}", dto.Namespace, dto.Name, path);

                    using var writer = new StreamWriter(path);
                    var importList = new HashSet<string>();

                    writer.WriteLine("// <auto-generated />");

                    foreach (var model in dto.Models)
                    {
                        foreach (var prop in model.Properties)
                        {
                            if (prop.TypeNameType == TypeNameEnum.Enum && prop.Options.JsonIgnore != JsonIgnoreCondition.Always)
                                importList.Add(prop.Property.TypeName);
                        }
                    }

                    writer.WriteLine("import type {");
                    foreach (var name in importList.OrderBy(l => l.ToLower()))
                    {
                        writer.WriteLine($"    {name},");
                    }

                    writer.WriteLine("} from './model'");

                    foreach (var model in dto.Models)
                    {
                        writer.WriteLine();
                        writer.WriteLine($"export interface {model.TsName} {{");
                        foreach (var prop in model.Properties
                                     .Cast<ITypescriptProperty>()
                                     .Concat(model.TsProperties))
                        {
                            if (prop.Options.JsonIgnore == JsonIgnoreCondition.Always)
                                continue;

                            var type = prop.TypeNameType switch
                            {
                                TypeNameEnum.Int => "number",
                                TypeNameEnum.Long => "number",
                                TypeNameEnum.Float => "number",
                                TypeNameEnum.Double => "number",
                                TypeNameEnum.Decimal => "number",
                                TypeNameEnum.Bool => "boolean",
                                TypeNameEnum.String => "string",
                                TypeNameEnum.DateTime => "string",
                                TypeNameEnum.Guid => "string",
                                TypeNameEnum.Model => prop.DtoTsName,
                                TypeNameEnum.Enum => prop.EnumName,
                                _ => throw new ArgumentOutOfRangeException(null, prop.TypeNameType, null),
                            };
                            var optional = "";

                            type = prop.EnumerableType switch
                            {
                                EnumerableType.None => type,
                                EnumerableType.Enumerable => $"{type}[]",
                                EnumerableType.Collection => $"{type}[]",
                                EnumerableType.Array => $"{type}[]",
                                EnumerableType.List => $"{type}[]",
                                _ => throw new ArgumentOutOfRangeException(null, prop.EnumerableType, null),
                            };

                            if (prop.Options.IsNullable)
                            {
                                type = $"{type} | null | undefined";
                                optional = "?";
                            }

                            writer.WriteLine($"    {prop.PropertyName.CamelCase}{optional}: {type}");
                        }

                        writer.WriteLine('}');
                    }

                    writer.WriteLine();
                }
            }
        }
    }

    public static void Run(Func<SolutionSpec> solution, string[] args)
    {
        var host = Host
            .CreateDefaultBuilder(args)
            .ConfigureHostConfiguration(c => { c.AddJsonFile("appsettings.json"); })
            .ConfigureServices(services =>
            {
                services.AddSingleton(_ => solution());
                services.AddSingleton<Generator>();
            })
            .Build();

        host.Services
            .GetRequiredService<Generator>()
            .Run(args[0]);
    }
}